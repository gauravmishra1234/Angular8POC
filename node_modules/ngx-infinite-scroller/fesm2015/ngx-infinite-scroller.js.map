{"version":3,"file":"ngx-infinite-scroller.js","sources":["ng://ngx-infinite-scroller/src/app/directive-state.service.ts","ng://ngx-infinite-scroller/src/app/enum/initial-scroll-position-type.enum.ts","ng://ngx-infinite-scroller/src/app/directive-context.ts","ng://ngx-infinite-scroller/src/app/scrolling-strategy/strategy-base.ts","ng://ngx-infinite-scroller/src/app/scrolling-strategy/scrolling-to-top.ts","ng://ngx-infinite-scroller/src/app/scrolling-strategy/scrolling-to-bottom.ts","ng://ngx-infinite-scroller/src/app/scrolling-strategy/scrolling-to-both.ts","ng://ngx-infinite-scroller/src/app/scroll-height-listener/scroll-height-listener.ts","ng://ngx-infinite-scroller/src/app/ngx-infinite-scroller.directive.ts","ng://ngx-infinite-scroller/src/app/ngx-infinite-scroller.module.ts","ng://ngx-infinite-scroller/ngx-infinite-scroller.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\n\nexport class DirectiveStateService {\n\n  public get scrollTop(): number {\n    return this._el.nativeElement.scrollTop;\n  }\n\n  public get scrollHeight(): number {\n    return this._el.nativeElement.scrollHeight;\n  }\n\n  public get clientHeight(): number {\n    return this._el.nativeElement.clientHeight;\n  }\n\n  public get initMode(): boolean {\n    return this._initMode;\n  }\n\n  public set initMode(initMode: boolean) {\n    this._initMode = initMode;\n  }\n\n  public get scrollStreamActive(): boolean {\n    return this._scrollStreamActive;\n  }\n\n  public set scrollStreamActive(active: boolean) {\n    this._scrollStreamActive = active;\n  }\n\n  public get previousScrollPositionpUpdated(): boolean {\n    return this._previousScrollPositionpUpdated;\n  }\n\n  public set previousScrollPositionpUpdated(previousScrollPositionpUpdated: boolean) {\n    this._previousScrollPositionpUpdated = previousScrollPositionpUpdated;\n  }\n\n  public get previousScrollTop(): number {\n    return this._previousScrollTop;\n  }\n\n  public get previousScrollHeight(): number {\n    return this._previousScrollHeight;\n  }\n\n  private _el: ElementRef;\n\n  private _initMode: boolean;\n\n  private _scrollStreamActive: boolean;\n\n  private _previousScrollPositionpUpdated: boolean;\n\n  private _previousScrollTop: number;\n\n  private _previousScrollHeight: number;\n\n  public setup(params: {\n    el: ElementRef,\n    initMode: boolean,\n    scrollStreamActive: boolean,\n    previousScrollPositionpUpdated: boolean\n  }): void {\n    this._el = params.el;\n    this._initMode = params.initMode;\n    this._scrollStreamActive = params.scrollStreamActive;\n    this._previousScrollPositionpUpdated = params.previousScrollPositionpUpdated;\n    this.updatePreviousScrollTop();\n    this.updatePreviousScrollHeight();\n  }\n\n  public updatePreviousScrollTop(): void {\n    this._previousScrollTop = this._el.nativeElement.scrollTop;\n  }\n\n  public updatePreviousScrollHeight(): void {\n    this._previousScrollHeight = this._el.nativeElement.scrollHeight;\n  }\n}\n","export enum InitialScrollPosition {\n  DEFAULT = 'DEFAULT',\n  TOP = 'TOP',\n  MIDDLE = 'MIDDLE',\n  BOTTOM = 'BOTTOM',\n}\n","import { ScrollingStrategy } from './model/scrolling-strategy.model';\n\nexport abstract class DirectiveContext {\n\n  protected scrollingStrategy: ScrollingStrategy;\n\n  constructor() { }\n}\n","import isNumber from 'is-number';\n\nimport { NgxInfiniteScrollerDirective } from '../ngx-infinite-scroller.directive';\nimport { DirectiveStateService } from '../directive-state.service';\n\nimport { ScrollPosition } from '../model/scroll-position.model';\nimport { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';\n\nexport abstract class StrategyBase {\n  constructor(\n    protected directive: NgxInfiniteScrollerDirective,\n    protected state: DirectiveStateService\n  ) { }\n\n  protected wasScrolledDown(prevPos: ScrollPosition, currentPos: ScrollPosition): boolean {\n    return prevPos.scrollTop < currentPos.scrollTop;\n  }\n\n  protected wasScrolledUp(prevPos: ScrollPosition, currentPos: ScrollPosition): boolean {\n    return !this.wasScrolledDown(prevPos, currentPos);\n  }\n\n  protected isScrollDownEnough(pos: ScrollPosition, scrollPositionTrigger: number): boolean {\n    return ((pos.scrollTop + pos.clientHeight) / pos.scrollHeight) > (scrollPositionTrigger / 100);\n  }\n\n  protected isScrollUpEnough(pos: ScrollPosition, scrollPositionTrigger: number): boolean {\n    return (pos.scrollTop / pos.scrollHeight) < (scrollPositionTrigger / 100);\n  }\n\n  protected getInitialScrollPositionValue(defaultScrollPosition: InitialScrollPosition): number {\n    const { initialScrollPosition } = this.directive;\n\n    if (isNumber(initialScrollPosition)) {\n      return Number(initialScrollPosition);\n    }\n\n    const initialScrollPositions: { [key: string]: number } = this.getInitialScrollPositions();\n\n    if (initialScrollPosition === InitialScrollPosition.DEFAULT) {\n      return initialScrollPositions[defaultScrollPosition];\n    }\n\n    return initialScrollPositions[initialScrollPosition];\n  }\n\n  private getInitialScrollPositions(): { [key: string]: number } {\n    const { scrollHeight, clientHeight } = this.state;\n\n    return {\n      [InitialScrollPosition.TOP]: 0,\n      [InitialScrollPosition.MIDDLE]: scrollHeight / 2 - clientHeight / 2,\n      [InitialScrollPosition.BOTTOM]: scrollHeight,\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { StrategyBase } from './strategy-base';\n\nimport { NgxInfiniteScrollerDirective } from '../ngx-infinite-scroller.directive';\nimport { DirectiveStateService } from '../directive-state.service';\n\nimport { ScrollingStrategy } from '../model/scrolling-strategy.model';\nimport { ScrollPosition } from '../model/scroll-position.model';\nimport { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';\n\nexport class ScrollingToTop extends StrategyBase implements ScrollingStrategy {\n\n  constructor(\n    directive: NgxInfiniteScrollerDirective,\n    state: DirectiveStateService\n  ) {\n    super(directive, state);\n  }\n\n  public scrollDirectionChanged(scrollPairChanged: Observable<ScrollPosition[]>):\n    Observable<ScrollPosition[]> {\n    return scrollPairChanged.pipe(\n      filter((scrollPositions: ScrollPosition[]) => {\n        return super.wasScrolledUp(\n          scrollPositions[0],\n          scrollPositions[1]\n        );\n      })\n    );\n  }\n\n  public scrollRequestZoneChanged(scrollDirectionChanged: Observable<ScrollPosition[]>):\n    Observable<ScrollPosition[]> {\n    return scrollDirectionChanged.pipe(\n      filter((scrollPositions: ScrollPosition[]) => {\n        return super.isScrollUpEnough(\n          scrollPositions[1],\n          this.directive.scrollUpPercentilePositionTrigger\n        );\n      })\n    );\n  }\n\n  public askForUpdate(): void {\n    this.directive.onScrollUp.next();\n  }\n\n  public setInitialScrollPosition(): void {\n    const initialScrollPositionValue = super.getInitialScrollPositionValue(\n      InitialScrollPosition.BOTTOM,\n    );\n\n    this.directive.scrollTo(initialScrollPositionValue);\n  }\n\n  public setPreviousScrollPosition(): void {\n    const prevScrollPosition = this.state.previousScrollTop +\n      (this.state.scrollHeight - this.state.previousScrollHeight);\n    this.directive.scrollTo(prevScrollPosition);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { StrategyBase } from './strategy-base';\n\nimport { NgxInfiniteScrollerDirective } from '../ngx-infinite-scroller.directive';\nimport { DirectiveStateService } from '../directive-state.service';\n\nimport { ScrollingStrategy } from '../model/scrolling-strategy.model';\nimport { ScrollPosition } from '../model/scroll-position.model';\nimport { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';\n\nexport class ScrollingToBottom extends StrategyBase implements ScrollingStrategy {\n\n  constructor(\n    directive: NgxInfiniteScrollerDirective,\n    state: DirectiveStateService\n  ) {\n    super(directive, state);\n  }\n\n  public scrollDirectionChanged(scrollPairChanged: Observable<ScrollPosition[]>):\n    Observable<ScrollPosition[]> {\n    return scrollPairChanged.pipe(\n      filter((scrollPositions: ScrollPosition[]) => {\n        return super.wasScrolledDown(\n          scrollPositions[0],\n          scrollPositions[1]\n        );\n      })\n    );\n  }\n\n  public scrollRequestZoneChanged(scrollDirectionChanged: Observable<ScrollPosition[]>):\n    Observable<ScrollPosition[]> {\n    return scrollDirectionChanged.pipe(\n      filter((scrollPositions: ScrollPosition[]) => {\n        return super.isScrollDownEnough(\n          scrollPositions[1],\n          this.directive.scrollDownPercentilePositionTrigger\n        );\n      })\n    );\n  }\n\n  public askForUpdate(): void {\n    this.directive.onScrollDown.next();\n  }\n\n  public setInitialScrollPosition(): void {\n    const initialScrollPositionValue = super.getInitialScrollPositionValue(\n      InitialScrollPosition.TOP,\n    );\n\n    this.directive.scrollTo(initialScrollPositionValue);\n  }\n\n  public setPreviousScrollPosition(): void {\n    const prevScrollPosition = this.state.previousScrollTop;\n    this.directive.scrollTo(prevScrollPosition);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { tap, filter } from 'rxjs/operators';\n\nimport { StrategyBase } from './strategy-base';\n\nimport { NgxInfiniteScrollerDirective } from '../ngx-infinite-scroller.directive';\nimport { DirectiveStateService } from '../directive-state.service';\n\nimport { ScrollingStrategy } from '../model/scrolling-strategy.model';\nimport { ScrollPosition } from '../model/scroll-position.model';\nimport { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';\n\nexport class ScrollingToBoth extends StrategyBase implements ScrollingStrategy {\n\n  private scrolledUp: boolean;\n\n  constructor(\n    directive: NgxInfiniteScrollerDirective,\n    state: DirectiveStateService\n  ) {\n    super(directive, state);\n  }\n\n  public scrollDirectionChanged(scrollPairChanged: Observable<ScrollPosition[]>):\n    Observable<ScrollPosition[]> {\n    return scrollPairChanged;\n  }\n\n  public scrollRequestZoneChanged(scrollDirectionChanged: Observable<ScrollPosition[]>):\n    Observable<ScrollPosition[]> {\n    return scrollDirectionChanged.pipe(\n      filter((scrollPositions: ScrollPosition[]) => {\n        return (super.isScrollUpEnough(\n          scrollPositions[1],\n          this.directive.scrollUpPercentilePositionTrigger\n        ) || super.isScrollDownEnough(\n          scrollPositions[1],\n          this.directive.scrollDownPercentilePositionTrigger\n        ));\n      }),\n      tap((scrollPositions: ScrollPosition[]) => {\n        this.scrolledUp = super.wasScrolledUp(\n          scrollPositions[0],\n          scrollPositions[1]);\n      })\n    );\n  }\n\n  public askForUpdate(): void {\n    if (this.scrolledUp) {\n      this.directive.onScrollUp.next();\n    } else {\n      this.directive.onScrollDown.next();\n    }\n  }\n\n  public setInitialScrollPosition(): void {\n    const initialScrollPositionValue = super.getInitialScrollPositionValue(\n      InitialScrollPosition.MIDDLE,\n    );\n\n    this.directive.scrollTo(initialScrollPositionValue);\n  }\n\n  public setPreviousScrollPosition(): void {\n    let prevScrollPosition;\n\n    if (this.scrolledUp) {\n      prevScrollPosition = this.state.previousScrollTop +\n        (this.state.scrollHeight - this.state.previousScrollHeight);\n    } else {\n      prevScrollPosition = this.state.previousScrollTop;\n    }\n\n    this.directive.scrollTo(prevScrollPosition);\n  }\n}\n","import { NgxInfiniteScrollerDirective } from '../ngx-infinite-scroller.directive';\nimport { DirectiveStateService } from '../directive-state.service';\n\nexport class ScrollHeightListener {\n\n  private DEFAULT_REQUEST_TIMEOUT = 30000;\n\n  private listener: number;\n\n  private httpRequestTimeout: any;\n\n  constructor(\n    private directive: NgxInfiniteScrollerDirective,\n    private state: DirectiveStateService\n  ) { }\n\n  public start(): void {\n    this.listener = window.requestAnimationFrame(this.listen.bind(this));\n\n    if (!this.httpRequestTimeout) {\n      this.httpRequestTimeout = setTimeout(\n        () => {\n          this.stopIfRequestTimeout();\n        },\n        this.DEFAULT_REQUEST_TIMEOUT\n      );\n    }\n  }\n\n  public stop(): void {\n    window.cancelAnimationFrame(this.listener);\n    clearTimeout(this.httpRequestTimeout);\n    this.httpRequestTimeout = null;\n  }\n\n  private listen(): void {\n    if (this.state.previousScrollHeight !== this.state.scrollHeight) {\n      this.stop();\n      this.directive.onScrollbarHeightChanged();\n    } else {\n      this.start();\n    }\n  }\n\n  private stopIfRequestTimeout(): void {\n    if (!this.state.previousScrollPositionpUpdated) {\n      this.stop();\n    }\n  }\n}\n","import {\r\n  Directive,\r\n  OnDestroy,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ElementRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\nimport { Observable, Subject, zip, fromEvent } from 'rxjs';\r\n\r\nimport { tap, map, pairwise, takeWhile, skipWhile, debounceTime } from 'rxjs/operators';\r\n\r\nimport { DirectiveStateService } from './directive-state.service';\r\n\r\nimport { ScrollPosition } from './model/scroll-position.model';\r\nimport { InitialScrollPosition } from './enum/initial-scroll-position-type.enum';\r\n\r\nimport { DirectiveContext } from './directive-context';\r\nimport { ScrollingToTop } from './scrolling-strategy/scrolling-to-top';\r\nimport { ScrollingToBottom } from './scrolling-strategy/scrolling-to-bottom';\r\nimport { ScrollingToBoth } from './scrolling-strategy/scrolling-to-both';\r\n\r\nimport { ScrollHeightListener } from './scroll-height-listener/scroll-height-listener';\r\n\r\n@Directive({\r\n  selector: '[ngxInfiniteScroller]'\r\n})\r\nexport class NgxInfiniteScrollerDirective\r\n  extends DirectiveContext\r\n  implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  @Input()\r\n  public strategy: string = 'scrollingToBottom';\r\n\r\n  @Input()\r\n  public initialScrollPosition: InitialScrollPosition | number = InitialScrollPosition.DEFAULT;\r\n\r\n  @Input()\r\n  public scrollbarAnimationInterval = 100;\r\n\r\n  @Input()\r\n  public scrollDebounceTimeAfterScrollHeightChanged = 50;\r\n\r\n  @Input()\r\n  public scrollDebounceTimeAfterDOMMutationOnInit = 1000;\r\n\r\n  @Input()\r\n  public scrollUpPercentilePositionTrigger = 2;\r\n\r\n  @Input()\r\n  public scrollDownPercentilePositionTrigger = 98;\r\n\r\n  @Output()\r\n  public onScrollUp: EventEmitter<null> = new EventEmitter<null>();\r\n\r\n  @Output()\r\n  public onScrollDown: EventEmitter<null> = new EventEmitter<null>();\r\n\r\n  private scrollHeightListener: ScrollHeightListener;\r\n\r\n  private scrollHeightChanged: Subject<null> = new Subject<null>();\r\n\r\n  private domMutationObserver: MutationObserver;\r\n\r\n  private domMutationEmitter: Subject<MutationRecord[]> = new Subject<MutationRecord[]>();\r\n\r\n  private scrollChanged: Observable<Event>;\r\n\r\n  private get scrollPairChanged(): Observable<ScrollPosition[]> {\r\n    if (this.scrollChanged) {\r\n      return this.scrollChanged.pipe(\r\n        takeWhile(() => this.state.scrollStreamActive),\r\n        map((e: any) => {\r\n          return <ScrollPosition>{\r\n            scrollHeight: e.target.scrollHeight,\r\n            scrollTop: e.target.scrollTop,\r\n            clientHeight: e.target.clientHeight,\r\n          };\r\n        }),\r\n        pairwise(),\r\n        debounceTime(this.scrollbarAnimationInterval)\r\n      );\r\n    }\r\n  }\r\n\r\n  private get scrollDirectionChanged(): Observable<ScrollPosition[]> {\r\n    return this.scrollingStrategy.scrollDirectionChanged(this.scrollPairChanged);\r\n  }\r\n\r\n  private get scrollRequestZoneChanged(): Observable<ScrollPosition[]> {\r\n    return this.scrollingStrategy.scrollRequestZoneChanged(this.scrollDirectionChanged).pipe(\r\n      tap(() => {\r\n        this.state.updatePreviousScrollTop();\r\n        this.state.updatePreviousScrollHeight();\r\n        this.state.previousScrollPositionpUpdated = false;\r\n        this.scrollHeightListener.start();\r\n      })\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private state: DirectiveStateService\r\n  ) {\r\n    super();\r\n    this.state.setup({\r\n      el: el,\r\n      initMode: true,\r\n      scrollStreamActive: true,\r\n      previousScrollPositionpUpdated: false\r\n    });\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.useStrategy();\r\n    this.useScrollHeightListener();\r\n\r\n    this.registerScrollEventHandler();\r\n    this.registerMutationObserver();\r\n    this.registerInitialScrollPostionHandler();\r\n    this.registerPreviousScrollPositionHandler();\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.registerScrollSpy();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.domMutationObserver.disconnect();\r\n  }\r\n\r\n  public scrollTo(position: number): void {\r\n    this.state.scrollStreamActive = false;\r\n    this.renderer.setProperty(this.el.nativeElement, 'scrollTop', position);\r\n    this.state.scrollStreamActive = true;\r\n  }\r\n\r\n  public onScrollbarHeightChanged(): void {\r\n    this.scrollHeightChanged.next();\r\n  }\r\n\r\n  private registerScrollEventHandler(): void {\r\n    this.scrollChanged = fromEvent(this.el.nativeElement, 'scroll');\r\n  }\r\n\r\n  private registerMutationObserver(): void {\r\n    this.domMutationObserver = new MutationObserver(\r\n      (mutations: MutationRecord[]) => {\r\n        this.domMutationEmitter.next(mutations);\r\n      });\r\n\r\n    const config = { attributes: true, childList: true, characterData: true };\r\n    this.domMutationObserver.observe(this.el.nativeElement, config);\r\n  }\r\n\r\n  private registerInitialScrollPostionHandler(): void {\r\n    this.domMutationEmitter.pipe(\r\n      takeWhile(() => this.state.initMode),\r\n      debounceTime(this.scrollDebounceTimeAfterDOMMutationOnInit)\r\n    ).subscribe(() => {\r\n      this.scrollingStrategy.setInitialScrollPosition();\r\n      this.state.initMode = false;\r\n    });\r\n  }\r\n\r\n  private registerPreviousScrollPositionHandler(): void {\r\n    zip(\r\n      this.scrollRequestZoneChanged,\r\n      this.scrollHeightChanged\r\n    ).pipe(\r\n      skipWhile(() => this.state.initMode),\r\n      debounceTime(this.scrollDebounceTimeAfterScrollHeightChanged)\r\n    ).subscribe(() => {\r\n      this.scrollingStrategy.setPreviousScrollPosition();\r\n      this.state.previousScrollPositionpUpdated = true;\r\n    });\r\n  }\r\n\r\n  private registerScrollSpy(): void {\r\n    this.scrollRequestZoneChanged.subscribe(() => {\r\n      this.scrollingStrategy.askForUpdate();\r\n    });\r\n  }\r\n\r\n  private useStrategy(): void {\r\n    switch (this.strategy) {\r\n      case 'scrollingToBoth':\r\n        this.scrollingStrategy = new ScrollingToBoth(this, this.state);\r\n        break;\r\n      case 'scrollingToTop':\r\n        this.scrollingStrategy = new ScrollingToTop(this, this.state);\r\n        break;\r\n      case 'scrollingToBottom': default:\r\n        this.scrollingStrategy = new ScrollingToBottom(this, this.state);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private useScrollHeightListener(): void {\r\n    this.scrollHeightListener = new ScrollHeightListener(this, this.state);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\n\nimport { NgxInfiniteScrollerDirective } from './ngx-infinite-scroller.directive';\nimport { DirectiveStateService } from './directive-state.service';\n\n@NgModule({\n  declarations: [\n    NgxInfiniteScrollerDirective\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxInfiniteScrollerDirective\n  ],\n  providers: [\n    DirectiveStateService\n  ],\n  bootstrap: []\n})\nexport class NgxInfiniteScrollerModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {DirectiveContext as Éµb} from './src/app/directive-context';\nexport {DirectiveStateService as Éµc} from './src/app/directive-state.service';\nexport {NgxInfiniteScrollerDirective as Éµa} from './src/app/ngx-infinite-scroller.directive';"],"names":["tslib_1.__decorate"],"mappings":"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"}