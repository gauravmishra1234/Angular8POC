import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, EventEmitter, Renderer2, } from '@angular/core';
import { Subject, zip, fromEvent } from 'rxjs';
import { tap, map, pairwise, takeWhile, skipWhile, debounceTime } from 'rxjs/operators';
import { DirectiveStateService } from './directive-state.service';
import { InitialScrollPosition } from './enum/initial-scroll-position-type.enum';
import { DirectiveContext } from './directive-context';
import { ScrollingToTop } from './scrolling-strategy/scrolling-to-top';
import { ScrollingToBottom } from './scrolling-strategy/scrolling-to-bottom';
import { ScrollingToBoth } from './scrolling-strategy/scrolling-to-both';
import { ScrollHeightListener } from './scroll-height-listener/scroll-height-listener';
let NgxInfiniteScrollerDirective = class NgxInfiniteScrollerDirective extends DirectiveContext {
    constructor(el, renderer, state) {
        super();
        this.el = el;
        this.renderer = renderer;
        this.state = state;
        this.strategy = 'scrollingToBottom';
        this.initialScrollPosition = InitialScrollPosition.DEFAULT;
        this.scrollbarAnimationInterval = 100;
        this.scrollDebounceTimeAfterScrollHeightChanged = 50;
        this.scrollDebounceTimeAfterDOMMutationOnInit = 1000;
        this.scrollUpPercentilePositionTrigger = 2;
        this.scrollDownPercentilePositionTrigger = 98;
        this.onScrollUp = new EventEmitter();
        this.onScrollDown = new EventEmitter();
        this.scrollHeightChanged = new Subject();
        this.domMutationEmitter = new Subject();
        this.state.setup({
            el: el,
            initMode: true,
            scrollStreamActive: true,
            previousScrollPositionpUpdated: false
        });
    }
    get scrollPairChanged() {
        if (this.scrollChanged) {
            return this.scrollChanged.pipe(takeWhile(() => this.state.scrollStreamActive), map((e) => {
                return {
                    scrollHeight: e.target.scrollHeight,
                    scrollTop: e.target.scrollTop,
                    clientHeight: e.target.clientHeight,
                };
            }), pairwise(), debounceTime(this.scrollbarAnimationInterval));
        }
    }
    get scrollDirectionChanged() {
        return this.scrollingStrategy.scrollDirectionChanged(this.scrollPairChanged);
    }
    get scrollRequestZoneChanged() {
        return this.scrollingStrategy.scrollRequestZoneChanged(this.scrollDirectionChanged).pipe(tap(() => {
            this.state.updatePreviousScrollTop();
            this.state.updatePreviousScrollHeight();
            this.state.previousScrollPositionpUpdated = false;
            this.scrollHeightListener.start();
        }));
    }
    ngOnInit() {
        this.useStrategy();
        this.useScrollHeightListener();
        this.registerScrollEventHandler();
        this.registerMutationObserver();
        this.registerInitialScrollPostionHandler();
        this.registerPreviousScrollPositionHandler();
    }
    ngAfterViewInit() {
        this.registerScrollSpy();
    }
    ngOnDestroy() {
        this.domMutationObserver.disconnect();
    }
    scrollTo(position) {
        this.state.scrollStreamActive = false;
        this.renderer.setProperty(this.el.nativeElement, 'scrollTop', position);
        this.state.scrollStreamActive = true;
    }
    onScrollbarHeightChanged() {
        this.scrollHeightChanged.next();
    }
    registerScrollEventHandler() {
        this.scrollChanged = fromEvent(this.el.nativeElement, 'scroll');
    }
    registerMutationObserver() {
        this.domMutationObserver = new MutationObserver((mutations) => {
            this.domMutationEmitter.next(mutations);
        });
        const config = { attributes: true, childList: true, characterData: true };
        this.domMutationObserver.observe(this.el.nativeElement, config);
    }
    registerInitialScrollPostionHandler() {
        this.domMutationEmitter.pipe(takeWhile(() => this.state.initMode), debounceTime(this.scrollDebounceTimeAfterDOMMutationOnInit)).subscribe(() => {
            this.scrollingStrategy.setInitialScrollPosition();
            this.state.initMode = false;
        });
    }
    registerPreviousScrollPositionHandler() {
        zip(this.scrollRequestZoneChanged, this.scrollHeightChanged).pipe(skipWhile(() => this.state.initMode), debounceTime(this.scrollDebounceTimeAfterScrollHeightChanged)).subscribe(() => {
            this.scrollingStrategy.setPreviousScrollPosition();
            this.state.previousScrollPositionpUpdated = true;
        });
    }
    registerScrollSpy() {
        this.scrollRequestZoneChanged.subscribe(() => {
            this.scrollingStrategy.askForUpdate();
        });
    }
    useStrategy() {
        switch (this.strategy) {
            case 'scrollingToBoth':
                this.scrollingStrategy = new ScrollingToBoth(this, this.state);
                break;
            case 'scrollingToTop':
                this.scrollingStrategy = new ScrollingToTop(this, this.state);
                break;
            case 'scrollingToBottom':
            default:
                this.scrollingStrategy = new ScrollingToBottom(this, this.state);
                break;
        }
    }
    useScrollHeightListener() {
        this.scrollHeightListener = new ScrollHeightListener(this, this.state);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], NgxInfiniteScrollerDirective.prototype, "strategy", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], NgxInfiniteScrollerDirective.prototype, "initialScrollPosition", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], NgxInfiniteScrollerDirective.prototype, "scrollbarAnimationInterval", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], NgxInfiniteScrollerDirective.prototype, "scrollDebounceTimeAfterScrollHeightChanged", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], NgxInfiniteScrollerDirective.prototype, "scrollDebounceTimeAfterDOMMutationOnInit", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], NgxInfiniteScrollerDirective.prototype, "scrollUpPercentilePositionTrigger", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], NgxInfiniteScrollerDirective.prototype, "scrollDownPercentilePositionTrigger", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], NgxInfiniteScrollerDirective.prototype, "onScrollUp", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], NgxInfiniteScrollerDirective.prototype, "onScrollDown", void 0);
NgxInfiniteScrollerDirective = tslib_1.__decorate([
    Directive({
        selector: '[ngxInfiniteScroller]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        DirectiveStateService])
], NgxInfiniteScrollerDirective);
export { NgxInfiniteScrollerDirective };
//# sourceMappingURL=data:application/json;base64,