(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('is-number')) :
    typeof define === 'function' && define.amd ? define('ngx-infinite-scroller', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', 'is-number'], factory) :
    (global = global || self, factory(global['ngx-infinite-scroller'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.isNumber));
}(this, function (exports, core, rxjs, operators, isNumber) { 'use strict';

    isNumber = isNumber && isNumber.hasOwnProperty('default') ? isNumber['default'] : isNumber;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var DirectiveStateService = /** @class */ (function () {
        function DirectiveStateService() {
        }
        Object.defineProperty(DirectiveStateService.prototype, "scrollTop", {
            get: function () {
                return this._el.nativeElement.scrollTop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "scrollHeight", {
            get: function () {
                return this._el.nativeElement.scrollHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "clientHeight", {
            get: function () {
                return this._el.nativeElement.clientHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "initMode", {
            get: function () {
                return this._initMode;
            },
            set: function (initMode) {
                this._initMode = initMode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "scrollStreamActive", {
            get: function () {
                return this._scrollStreamActive;
            },
            set: function (active) {
                this._scrollStreamActive = active;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "previousScrollPositionpUpdated", {
            get: function () {
                return this._previousScrollPositionpUpdated;
            },
            set: function (previousScrollPositionpUpdated) {
                this._previousScrollPositionpUpdated = previousScrollPositionpUpdated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "previousScrollTop", {
            get: function () {
                return this._previousScrollTop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "previousScrollHeight", {
            get: function () {
                return this._previousScrollHeight;
            },
            enumerable: true,
            configurable: true
        });
        DirectiveStateService.prototype.setup = function (params) {
            this._el = params.el;
            this._initMode = params.initMode;
            this._scrollStreamActive = params.scrollStreamActive;
            this._previousScrollPositionpUpdated = params.previousScrollPositionpUpdated;
            this.updatePreviousScrollTop();
            this.updatePreviousScrollHeight();
        };
        DirectiveStateService.prototype.updatePreviousScrollTop = function () {
            this._previousScrollTop = this._el.nativeElement.scrollTop;
        };
        DirectiveStateService.prototype.updatePreviousScrollHeight = function () {
            this._previousScrollHeight = this._el.nativeElement.scrollHeight;
        };
        return DirectiveStateService;
    }());

    var InitialScrollPosition;
    (function (InitialScrollPosition) {
        InitialScrollPosition["DEFAULT"] = "DEFAULT";
        InitialScrollPosition["TOP"] = "TOP";
        InitialScrollPosition["MIDDLE"] = "MIDDLE";
        InitialScrollPosition["BOTTOM"] = "BOTTOM";
    })(InitialScrollPosition || (InitialScrollPosition = {}));

    var DirectiveContext = /** @class */ (function () {
        function DirectiveContext() {
        }
        return DirectiveContext;
    }());

    var StrategyBase = /** @class */ (function () {
        function StrategyBase(directive, state) {
            this.directive = directive;
            this.state = state;
        }
        StrategyBase.prototype.wasScrolledDown = function (prevPos, currentPos) {
            return prevPos.scrollTop < currentPos.scrollTop;
        };
        StrategyBase.prototype.wasScrolledUp = function (prevPos, currentPos) {
            return !this.wasScrolledDown(prevPos, currentPos);
        };
        StrategyBase.prototype.isScrollDownEnough = function (pos, scrollPositionTrigger) {
            return ((pos.scrollTop + pos.clientHeight) / pos.scrollHeight) > (scrollPositionTrigger / 100);
        };
        StrategyBase.prototype.isScrollUpEnough = function (pos, scrollPositionTrigger) {
            return (pos.scrollTop / pos.scrollHeight) < (scrollPositionTrigger / 100);
        };
        StrategyBase.prototype.getInitialScrollPositionValue = function (defaultScrollPosition) {
            var initialScrollPosition = this.directive.initialScrollPosition;
            if (isNumber(initialScrollPosition)) {
                return Number(initialScrollPosition);
            }
            var initialScrollPositions = this.getInitialScrollPositions();
            if (initialScrollPosition === InitialScrollPosition.DEFAULT) {
                return initialScrollPositions[defaultScrollPosition];
            }
            return initialScrollPositions[initialScrollPosition];
        };
        StrategyBase.prototype.getInitialScrollPositions = function () {
            var _a;
            var _b = this.state, scrollHeight = _b.scrollHeight, clientHeight = _b.clientHeight;
            return _a = {},
                _a[InitialScrollPosition.TOP] = 0,
                _a[InitialScrollPosition.MIDDLE] = scrollHeight / 2 - clientHeight / 2,
                _a[InitialScrollPosition.BOTTOM] = scrollHeight,
                _a;
        };
        return StrategyBase;
    }());

    var ScrollingToTop = /** @class */ (function (_super) {
        __extends(ScrollingToTop, _super);
        function ScrollingToTop(directive, state) {
            return _super.call(this, directive, state) || this;
        }
        ScrollingToTop.prototype.scrollDirectionChanged = function (scrollPairChanged) {
            var _this = this;
            return scrollPairChanged.pipe(operators.filter(function (scrollPositions) {
                return _super.prototype.wasScrolledUp.call(_this, scrollPositions[0], scrollPositions[1]);
            }));
        };
        ScrollingToTop.prototype.scrollRequestZoneChanged = function (scrollDirectionChanged) {
            var _this = this;
            return scrollDirectionChanged.pipe(operators.filter(function (scrollPositions) {
                return _super.prototype.isScrollUpEnough.call(_this, scrollPositions[1], _this.directive.scrollUpPercentilePositionTrigger);
            }));
        };
        ScrollingToTop.prototype.askForUpdate = function () {
            this.directive.onScrollUp.next();
        };
        ScrollingToTop.prototype.setInitialScrollPosition = function () {
            var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.BOTTOM);
            this.directive.scrollTo(initialScrollPositionValue);
        };
        ScrollingToTop.prototype.setPreviousScrollPosition = function () {
            var prevScrollPosition = this.state.previousScrollTop +
                (this.state.scrollHeight - this.state.previousScrollHeight);
            this.directive.scrollTo(prevScrollPosition);
        };
        return ScrollingToTop;
    }(StrategyBase));

    var ScrollingToBottom = /** @class */ (function (_super) {
        __extends(ScrollingToBottom, _super);
        function ScrollingToBottom(directive, state) {
            return _super.call(this, directive, state) || this;
        }
        ScrollingToBottom.prototype.scrollDirectionChanged = function (scrollPairChanged) {
            var _this = this;
            return scrollPairChanged.pipe(operators.filter(function (scrollPositions) {
                return _super.prototype.wasScrolledDown.call(_this, scrollPositions[0], scrollPositions[1]);
            }));
        };
        ScrollingToBottom.prototype.scrollRequestZoneChanged = function (scrollDirectionChanged) {
            var _this = this;
            return scrollDirectionChanged.pipe(operators.filter(function (scrollPositions) {
                return _super.prototype.isScrollDownEnough.call(_this, scrollPositions[1], _this.directive.scrollDownPercentilePositionTrigger);
            }));
        };
        ScrollingToBottom.prototype.askForUpdate = function () {
            this.directive.onScrollDown.next();
        };
        ScrollingToBottom.prototype.setInitialScrollPosition = function () {
            var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.TOP);
            this.directive.scrollTo(initialScrollPositionValue);
        };
        ScrollingToBottom.prototype.setPreviousScrollPosition = function () {
            var prevScrollPosition = this.state.previousScrollTop;
            this.directive.scrollTo(prevScrollPosition);
        };
        return ScrollingToBottom;
    }(StrategyBase));

    var ScrollingToBoth = /** @class */ (function (_super) {
        __extends(ScrollingToBoth, _super);
        function ScrollingToBoth(directive, state) {
            return _super.call(this, directive, state) || this;
        }
        ScrollingToBoth.prototype.scrollDirectionChanged = function (scrollPairChanged) {
            return scrollPairChanged;
        };
        ScrollingToBoth.prototype.scrollRequestZoneChanged = function (scrollDirectionChanged) {
            var _this = this;
            return scrollDirectionChanged.pipe(operators.filter(function (scrollPositions) {
                return (_super.prototype.isScrollUpEnough.call(_this, scrollPositions[1], _this.directive.scrollUpPercentilePositionTrigger) || _super.prototype.isScrollDownEnough.call(_this, scrollPositions[1], _this.directive.scrollDownPercentilePositionTrigger));
            }), operators.tap(function (scrollPositions) {
                _this.scrolledUp = _super.prototype.wasScrolledUp.call(_this, scrollPositions[0], scrollPositions[1]);
            }));
        };
        ScrollingToBoth.prototype.askForUpdate = function () {
            if (this.scrolledUp) {
                this.directive.onScrollUp.next();
            }
            else {
                this.directive.onScrollDown.next();
            }
        };
        ScrollingToBoth.prototype.setInitialScrollPosition = function () {
            var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.MIDDLE);
            this.directive.scrollTo(initialScrollPositionValue);
        };
        ScrollingToBoth.prototype.setPreviousScrollPosition = function () {
            var prevScrollPosition;
            if (this.scrolledUp) {
                prevScrollPosition = this.state.previousScrollTop +
                    (this.state.scrollHeight - this.state.previousScrollHeight);
            }
            else {
                prevScrollPosition = this.state.previousScrollTop;
            }
            this.directive.scrollTo(prevScrollPosition);
        };
        return ScrollingToBoth;
    }(StrategyBase));

    var ScrollHeightListener = /** @class */ (function () {
        function ScrollHeightListener(directive, state) {
            this.directive = directive;
            this.state = state;
            this.DEFAULT_REQUEST_TIMEOUT = 30000;
        }
        ScrollHeightListener.prototype.start = function () {
            var _this = this;
            this.listener = window.requestAnimationFrame(this.listen.bind(this));
            if (!this.httpRequestTimeout) {
                this.httpRequestTimeout = setTimeout(function () {
                    _this.stopIfRequestTimeout();
                }, this.DEFAULT_REQUEST_TIMEOUT);
            }
        };
        ScrollHeightListener.prototype.stop = function () {
            window.cancelAnimationFrame(this.listener);
            clearTimeout(this.httpRequestTimeout);
            this.httpRequestTimeout = null;
        };
        ScrollHeightListener.prototype.listen = function () {
            if (this.state.previousScrollHeight !== this.state.scrollHeight) {
                this.stop();
                this.directive.onScrollbarHeightChanged();
            }
            else {
                this.start();
            }
        };
        ScrollHeightListener.prototype.stopIfRequestTimeout = function () {
            if (!this.state.previousScrollPositionpUpdated) {
                this.stop();
            }
        };
        return ScrollHeightListener;
    }());

    var NgxInfiniteScrollerDirective = /** @class */ (function (_super) {
        __extends(NgxInfiniteScrollerDirective, _super);
        function NgxInfiniteScrollerDirective(el, renderer, state) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.renderer = renderer;
            _this.state = state;
            _this.strategy = 'scrollingToBottom';
            _this.initialScrollPosition = InitialScrollPosition.DEFAULT;
            _this.scrollbarAnimationInterval = 100;
            _this.scrollDebounceTimeAfterScrollHeightChanged = 50;
            _this.scrollDebounceTimeAfterDOMMutationOnInit = 1000;
            _this.scrollUpPercentilePositionTrigger = 2;
            _this.scrollDownPercentilePositionTrigger = 98;
            _this.onScrollUp = new core.EventEmitter();
            _this.onScrollDown = new core.EventEmitter();
            _this.scrollHeightChanged = new rxjs.Subject();
            _this.domMutationEmitter = new rxjs.Subject();
            _this.state.setup({
                el: el,
                initMode: true,
                scrollStreamActive: true,
                previousScrollPositionpUpdated: false
            });
            return _this;
        }
        Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollPairChanged", {
            get: function () {
                var _this = this;
                if (this.scrollChanged) {
                    return this.scrollChanged.pipe(operators.takeWhile(function () { return _this.state.scrollStreamActive; }), operators.map(function (e) {
                        return {
                            scrollHeight: e.target.scrollHeight,
                            scrollTop: e.target.scrollTop,
                            clientHeight: e.target.clientHeight,
                        };
                    }), operators.pairwise(), operators.debounceTime(this.scrollbarAnimationInterval));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollDirectionChanged", {
            get: function () {
                return this.scrollingStrategy.scrollDirectionChanged(this.scrollPairChanged);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollRequestZoneChanged", {
            get: function () {
                var _this = this;
                return this.scrollingStrategy.scrollRequestZoneChanged(this.scrollDirectionChanged).pipe(operators.tap(function () {
                    _this.state.updatePreviousScrollTop();
                    _this.state.updatePreviousScrollHeight();
                    _this.state.previousScrollPositionpUpdated = false;
                    _this.scrollHeightListener.start();
                }));
            },
            enumerable: true,
            configurable: true
        });
        NgxInfiniteScrollerDirective.prototype.ngOnInit = function () {
            this.useStrategy();
            this.useScrollHeightListener();
            this.registerScrollEventHandler();
            this.registerMutationObserver();
            this.registerInitialScrollPostionHandler();
            this.registerPreviousScrollPositionHandler();
        };
        NgxInfiniteScrollerDirective.prototype.ngAfterViewInit = function () {
            this.registerScrollSpy();
        };
        NgxInfiniteScrollerDirective.prototype.ngOnDestroy = function () {
            this.domMutationObserver.disconnect();
        };
        NgxInfiniteScrollerDirective.prototype.scrollTo = function (position) {
            this.state.scrollStreamActive = false;
            this.renderer.setProperty(this.el.nativeElement, 'scrollTop', position);
            this.state.scrollStreamActive = true;
        };
        NgxInfiniteScrollerDirective.prototype.onScrollbarHeightChanged = function () {
            this.scrollHeightChanged.next();
        };
        NgxInfiniteScrollerDirective.prototype.registerScrollEventHandler = function () {
            this.scrollChanged = rxjs.fromEvent(this.el.nativeElement, 'scroll');
        };
        NgxInfiniteScrollerDirective.prototype.registerMutationObserver = function () {
            var _this = this;
            this.domMutationObserver = new MutationObserver(function (mutations) {
                _this.domMutationEmitter.next(mutations);
            });
            var config = { attributes: true, childList: true, characterData: true };
            this.domMutationObserver.observe(this.el.nativeElement, config);
        };
        NgxInfiniteScrollerDirective.prototype.registerInitialScrollPostionHandler = function () {
            var _this = this;
            this.domMutationEmitter.pipe(operators.takeWhile(function () { return _this.state.initMode; }), operators.debounceTime(this.scrollDebounceTimeAfterDOMMutationOnInit)).subscribe(function () {
                _this.scrollingStrategy.setInitialScrollPosition();
                _this.state.initMode = false;
            });
        };
        NgxInfiniteScrollerDirective.prototype.registerPreviousScrollPositionHandler = function () {
            var _this = this;
            rxjs.zip(this.scrollRequestZoneChanged, this.scrollHeightChanged).pipe(operators.skipWhile(function () { return _this.state.initMode; }), operators.debounceTime(this.scrollDebounceTimeAfterScrollHeightChanged)).subscribe(function () {
                _this.scrollingStrategy.setPreviousScrollPosition();
                _this.state.previousScrollPositionpUpdated = true;
            });
        };
        NgxInfiniteScrollerDirective.prototype.registerScrollSpy = function () {
            var _this = this;
            this.scrollRequestZoneChanged.subscribe(function () {
                _this.scrollingStrategy.askForUpdate();
            });
        };
        NgxInfiniteScrollerDirective.prototype.useStrategy = function () {
            switch (this.strategy) {
                case 'scrollingToBoth':
                    this.scrollingStrategy = new ScrollingToBoth(this, this.state);
                    break;
                case 'scrollingToTop':
                    this.scrollingStrategy = new ScrollingToTop(this, this.state);
                    break;
                case 'scrollingToBottom':
                default:
                    this.scrollingStrategy = new ScrollingToBottom(this, this.state);
                    break;
            }
        };
        NgxInfiniteScrollerDirective.prototype.useScrollHeightListener = function () {
            this.scrollHeightListener = new ScrollHeightListener(this, this.state);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], NgxInfiniteScrollerDirective.prototype, "strategy", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxInfiniteScrollerDirective.prototype, "initialScrollPosition", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxInfiniteScrollerDirective.prototype, "scrollbarAnimationInterval", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxInfiniteScrollerDirective.prototype, "scrollDebounceTimeAfterScrollHeightChanged", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxInfiniteScrollerDirective.prototype, "scrollDebounceTimeAfterDOMMutationOnInit", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxInfiniteScrollerDirective.prototype, "scrollUpPercentilePositionTrigger", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxInfiniteScrollerDirective.prototype, "scrollDownPercentilePositionTrigger", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], NgxInfiniteScrollerDirective.prototype, "onScrollUp", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], NgxInfiniteScrollerDirective.prototype, "onScrollDown", void 0);
        NgxInfiniteScrollerDirective = __decorate([
            core.Directive({
                selector: '[ngxInfiniteScroller]'
            }),
            __metadata("design:paramtypes", [core.ElementRef,
                core.Renderer2,
                DirectiveStateService])
        ], NgxInfiniteScrollerDirective);
        return NgxInfiniteScrollerDirective;
    }(DirectiveContext));

    var NgxInfiniteScrollerModule = /** @class */ (function () {
        function NgxInfiniteScrollerModule() {
        }
        NgxInfiniteScrollerModule = __decorate([
            core.NgModule({
                declarations: [
                    NgxInfiniteScrollerDirective
                ],
                imports: [],
                exports: [
                    NgxInfiniteScrollerDirective
                ],
                providers: [
                    DirectiveStateService
                ],
                bootstrap: []
            })
        ], NgxInfiniteScrollerModule);
        return NgxInfiniteScrollerModule;
    }());

    exports.NgxInfiniteScrollerModule = NgxInfiniteScrollerModule;
    exports.ɵa = NgxInfiniteScrollerDirective;
    exports.ɵb = DirectiveContext;
    exports.ɵc = DirectiveStateService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-infinite-scroller.umd.js.map
