import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, EventEmitter, Renderer2, } from '@angular/core';
import { Subject, zip, fromEvent } from 'rxjs';
import { tap, map, pairwise, takeWhile, skipWhile, debounceTime } from 'rxjs/operators';
import { DirectiveStateService } from './directive-state.service';
import { InitialScrollPosition } from './enum/initial-scroll-position-type.enum';
import { DirectiveContext } from './directive-context';
import { ScrollingToTop } from './scrolling-strategy/scrolling-to-top';
import { ScrollingToBottom } from './scrolling-strategy/scrolling-to-bottom';
import { ScrollingToBoth } from './scrolling-strategy/scrolling-to-both';
import { ScrollHeightListener } from './scroll-height-listener/scroll-height-listener';
var NgxInfiniteScrollerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NgxInfiniteScrollerDirective, _super);
    function NgxInfiniteScrollerDirective(el, renderer, state) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.state = state;
        _this.strategy = 'scrollingToBottom';
        _this.initialScrollPosition = InitialScrollPosition.DEFAULT;
        _this.scrollbarAnimationInterval = 100;
        _this.scrollDebounceTimeAfterScrollHeightChanged = 50;
        _this.scrollDebounceTimeAfterDOMMutationOnInit = 1000;
        _this.scrollUpPercentilePositionTrigger = 2;
        _this.scrollDownPercentilePositionTrigger = 98;
        _this.onScrollUp = new EventEmitter();
        _this.onScrollDown = new EventEmitter();
        _this.scrollHeightChanged = new Subject();
        _this.domMutationEmitter = new Subject();
        _this.state.setup({
            el: el,
            initMode: true,
            scrollStreamActive: true,
            previousScrollPositionpUpdated: false
        });
        return _this;
    }
    Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollPairChanged", {
        get: function () {
            var _this = this;
            if (this.scrollChanged) {
                return this.scrollChanged.pipe(takeWhile(function () { return _this.state.scrollStreamActive; }), map(function (e) {
                    return {
                        scrollHeight: e.target.scrollHeight,
                        scrollTop: e.target.scrollTop,
                        clientHeight: e.target.clientHeight,
                    };
                }), pairwise(), debounceTime(this.scrollbarAnimationInterval));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollDirectionChanged", {
        get: function () {
            return this.scrollingStrategy.scrollDirectionChanged(this.scrollPairChanged);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollRequestZoneChanged", {
        get: function () {
            var _this = this;
            return this.scrollingStrategy.scrollRequestZoneChanged(this.scrollDirectionChanged).pipe(tap(function () {
                _this.state.updatePreviousScrollTop();
                _this.state.updatePreviousScrollHeight();
                _this.state.previousScrollPositionpUpdated = false;
                _this.scrollHeightListener.start();
            }));
        },
        enumerable: true,
        configurable: true
    });
    NgxInfiniteScrollerDirective.prototype.ngOnInit = function () {
        this.useStrategy();
        this.useScrollHeightListener();
        this.registerScrollEventHandler();
        this.registerMutationObserver();
        this.registerInitialScrollPostionHandler();
        this.registerPreviousScrollPositionHandler();
    };
    NgxInfiniteScrollerDirective.prototype.ngAfterViewInit = function () {
        this.registerScrollSpy();
    };
    NgxInfiniteScrollerDirective.prototype.ngOnDestroy = function () {
        this.domMutationObserver.disconnect();
    };
    NgxInfiniteScrollerDirective.prototype.scrollTo = function (position) {
        this.state.scrollStreamActive = false;
        this.renderer.setProperty(this.el.nativeElement, 'scrollTop', position);
        this.state.scrollStreamActive = true;
    };
    NgxInfiniteScrollerDirective.prototype.onScrollbarHeightChanged = function () {
        this.scrollHeightChanged.next();
    };
    NgxInfiniteScrollerDirective.prototype.registerScrollEventHandler = function () {
        this.scrollChanged = fromEvent(this.el.nativeElement, 'scroll');
    };
    NgxInfiniteScrollerDirective.prototype.registerMutationObserver = function () {
        var _this = this;
        this.domMutationObserver = new MutationObserver(function (mutations) {
            _this.domMutationEmitter.next(mutations);
        });
        var config = { attributes: true, childList: true, characterData: true };
        this.domMutationObserver.observe(this.el.nativeElement, config);
    };
    NgxInfiniteScrollerDirective.prototype.registerInitialScrollPostionHandler = function () {
        var _this = this;
        this.domMutationEmitter.pipe(takeWhile(function () { return _this.state.initMode; }), debounceTime(this.scrollDebounceTimeAfterDOMMutationOnInit)).subscribe(function () {
            _this.scrollingStrategy.setInitialScrollPosition();
            _this.state.initMode = false;
        });
    };
    NgxInfiniteScrollerDirective.prototype.registerPreviousScrollPositionHandler = function () {
        var _this = this;
        zip(this.scrollRequestZoneChanged, this.scrollHeightChanged).pipe(skipWhile(function () { return _this.state.initMode; }), debounceTime(this.scrollDebounceTimeAfterScrollHeightChanged)).subscribe(function () {
            _this.scrollingStrategy.setPreviousScrollPosition();
            _this.state.previousScrollPositionpUpdated = true;
        });
    };
    NgxInfiniteScrollerDirective.prototype.registerScrollSpy = function () {
        var _this = this;
        this.scrollRequestZoneChanged.subscribe(function () {
            _this.scrollingStrategy.askForUpdate();
        });
    };
    NgxInfiniteScrollerDirective.prototype.useStrategy = function () {
        switch (this.strategy) {
            case 'scrollingToBoth':
                this.scrollingStrategy = new ScrollingToBoth(this, this.state);
                break;
            case 'scrollingToTop':
                this.scrollingStrategy = new ScrollingToTop(this, this.state);
                break;
            case 'scrollingToBottom':
            default:
                this.scrollingStrategy = new ScrollingToBottom(this, this.state);
                break;
        }
    };
    NgxInfiniteScrollerDirective.prototype.useScrollHeightListener = function () {
        this.scrollHeightListener = new ScrollHeightListener(this, this.state);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], NgxInfiniteScrollerDirective.prototype, "strategy", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], NgxInfiniteScrollerDirective.prototype, "initialScrollPosition", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], NgxInfiniteScrollerDirective.prototype, "scrollbarAnimationInterval", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], NgxInfiniteScrollerDirective.prototype, "scrollDebounceTimeAfterScrollHeightChanged", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], NgxInfiniteScrollerDirective.prototype, "scrollDebounceTimeAfterDOMMutationOnInit", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], NgxInfiniteScrollerDirective.prototype, "scrollUpPercentilePositionTrigger", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], NgxInfiniteScrollerDirective.prototype, "scrollDownPercentilePositionTrigger", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], NgxInfiniteScrollerDirective.prototype, "onScrollUp", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], NgxInfiniteScrollerDirective.prototype, "onScrollDown", void 0);
    NgxInfiniteScrollerDirective = tslib_1.__decorate([
        Directive({
            selector: '[ngxInfiniteScroller]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            DirectiveStateService])
    ], NgxInfiniteScrollerDirective);
    return NgxInfiniteScrollerDirective;
}(DirectiveContext));
export { NgxInfiniteScrollerDirective };
//# sourceMappingURL=data:application/json;base64,