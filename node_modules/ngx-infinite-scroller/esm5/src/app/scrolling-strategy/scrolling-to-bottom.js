import * as tslib_1 from "tslib";
import { filter } from 'rxjs/operators';
import { StrategyBase } from './strategy-base';
import { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';
var ScrollingToBottom = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollingToBottom, _super);
    function ScrollingToBottom(directive, state) {
        return _super.call(this, directive, state) || this;
    }
    ScrollingToBottom.prototype.scrollDirectionChanged = function (scrollPairChanged) {
        var _this = this;
        return scrollPairChanged.pipe(filter(function (scrollPositions) {
            return _super.prototype.wasScrolledDown.call(_this, scrollPositions[0], scrollPositions[1]);
        }));
    };
    ScrollingToBottom.prototype.scrollRequestZoneChanged = function (scrollDirectionChanged) {
        var _this = this;
        return scrollDirectionChanged.pipe(filter(function (scrollPositions) {
            return _super.prototype.isScrollDownEnough.call(_this, scrollPositions[1], _this.directive.scrollDownPercentilePositionTrigger);
        }));
    };
    ScrollingToBottom.prototype.askForUpdate = function () {
        this.directive.onScrollDown.next();
    };
    ScrollingToBottom.prototype.setInitialScrollPosition = function () {
        var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.TOP);
        this.directive.scrollTo(initialScrollPositionValue);
    };
    ScrollingToBottom.prototype.setPreviousScrollPosition = function () {
        var prevScrollPosition = this.state.previousScrollTop;
        this.directive.scrollTo(prevScrollPosition);
    };
    return ScrollingToBottom;
}(StrategyBase));
export { ScrollingToBottom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsaW5nLXRvLWJvdHRvbS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmZpbml0ZS1zY3JvbGxlci8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2Nyb2xsaW5nLXN0cmF0ZWd5L3Njcm9sbGluZy10by1ib3R0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPL0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFbEY7SUFBdUMsNkNBQVk7SUFFakQsMkJBQ0UsU0FBdUMsRUFDdkMsS0FBNEI7ZUFFNUIsa0JBQU0sU0FBUyxFQUFFLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRU0sa0RBQXNCLEdBQTdCLFVBQThCLGlCQUErQztRQUE3RSxpQkFVQztRQVJDLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUMzQixNQUFNLENBQUMsVUFBQyxlQUFpQztZQUN2QyxPQUFPLGlCQUFNLGVBQWUsYUFDMUIsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUNsQixlQUFlLENBQUMsQ0FBQyxDQUFDLENBQ25CLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVNLG9EQUF3QixHQUEvQixVQUFnQyxzQkFBb0Q7UUFBcEYsaUJBVUM7UUFSQyxPQUFPLHNCQUFzQixDQUFDLElBQUksQ0FDaEMsTUFBTSxDQUFDLFVBQUMsZUFBaUM7WUFDdkMsT0FBTyxpQkFBTSxrQkFBa0IsYUFDN0IsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUNsQixLQUFJLENBQUMsU0FBUyxDQUFDLG1DQUFtQyxDQUNuRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSx3Q0FBWSxHQUFuQjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxvREFBd0IsR0FBL0I7UUFDRSxJQUFNLDBCQUEwQixHQUFHLGlCQUFNLDZCQUE2QixZQUNwRSxxQkFBcUIsQ0FBQyxHQUFHLENBQzFCLENBQUM7UUFFRixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxxREFBeUIsR0FBaEM7UUFDRSxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7UUFDeEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBakRELENBQXVDLFlBQVksR0FpRGxEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBTdHJhdGVneUJhc2UgfSBmcm9tICcuL3N0cmF0ZWd5LWJhc2UnO1xuXG5pbXBvcnQgeyBOZ3hJbmZpbml0ZVNjcm9sbGVyRGlyZWN0aXZlIH0gZnJvbSAnLi4vbmd4LWluZmluaXRlLXNjcm9sbGVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEaXJlY3RpdmVTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9kaXJlY3RpdmUtc3RhdGUuc2VydmljZSc7XG5cbmltcG9ydCB7IFNjcm9sbGluZ1N0cmF0ZWd5IH0gZnJvbSAnLi4vbW9kZWwvc2Nyb2xsaW5nLXN0cmF0ZWd5Lm1vZGVsJztcbmltcG9ydCB7IFNjcm9sbFBvc2l0aW9uIH0gZnJvbSAnLi4vbW9kZWwvc2Nyb2xsLXBvc2l0aW9uLm1vZGVsJztcbmltcG9ydCB7IEluaXRpYWxTY3JvbGxQb3NpdGlvbiB9IGZyb20gJy4uL2VudW0vaW5pdGlhbC1zY3JvbGwtcG9zaXRpb24tdHlwZS5lbnVtJztcblxuZXhwb3J0IGNsYXNzIFNjcm9sbGluZ1RvQm90dG9tIGV4dGVuZHMgU3RyYXRlZ3lCYXNlIGltcGxlbWVudHMgU2Nyb2xsaW5nU3RyYXRlZ3kge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGRpcmVjdGl2ZTogTmd4SW5maW5pdGVTY3JvbGxlckRpcmVjdGl2ZSxcbiAgICBzdGF0ZTogRGlyZWN0aXZlU3RhdGVTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGRpcmVjdGl2ZSwgc3RhdGUpO1xuICB9XG5cbiAgcHVibGljIHNjcm9sbERpcmVjdGlvbkNoYW5nZWQoc2Nyb2xsUGFpckNoYW5nZWQ6IE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4pOlxuICAgIE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4ge1xuICAgIHJldHVybiBzY3JvbGxQYWlyQ2hhbmdlZC5waXBlKFxuICAgICAgZmlsdGVyKChzY3JvbGxQb3NpdGlvbnM6IFNjcm9sbFBvc2l0aW9uW10pID0+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLndhc1Njcm9sbGVkRG93bihcbiAgICAgICAgICBzY3JvbGxQb3NpdGlvbnNbMF0sXG4gICAgICAgICAgc2Nyb2xsUG9zaXRpb25zWzFdXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsUmVxdWVzdFpvbmVDaGFuZ2VkKHNjcm9sbERpcmVjdGlvbkNoYW5nZWQ6IE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4pOlxuICAgIE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4ge1xuICAgIHJldHVybiBzY3JvbGxEaXJlY3Rpb25DaGFuZ2VkLnBpcGUoXG4gICAgICBmaWx0ZXIoKHNjcm9sbFBvc2l0aW9uczogU2Nyb2xsUG9zaXRpb25bXSkgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuaXNTY3JvbGxEb3duRW5vdWdoKFxuICAgICAgICAgIHNjcm9sbFBvc2l0aW9uc1sxXSxcbiAgICAgICAgICB0aGlzLmRpcmVjdGl2ZS5zY3JvbGxEb3duUGVyY2VudGlsZVBvc2l0aW9uVHJpZ2dlclxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFza0ZvclVwZGF0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpcmVjdGl2ZS5vblNjcm9sbERvd24ubmV4dCgpO1xuICB9XG5cbiAgcHVibGljIHNldEluaXRpYWxTY3JvbGxQb3NpdGlvbigpOiB2b2lkIHtcbiAgICBjb25zdCBpbml0aWFsU2Nyb2xsUG9zaXRpb25WYWx1ZSA9IHN1cGVyLmdldEluaXRpYWxTY3JvbGxQb3NpdGlvblZhbHVlKFxuICAgICAgSW5pdGlhbFNjcm9sbFBvc2l0aW9uLlRPUCxcbiAgICApO1xuXG4gICAgdGhpcy5kaXJlY3RpdmUuc2Nyb2xsVG8oaW5pdGlhbFNjcm9sbFBvc2l0aW9uVmFsdWUpO1xuICB9XG5cbiAgcHVibGljIHNldFByZXZpb3VzU2Nyb2xsUG9zaXRpb24oKTogdm9pZCB7XG4gICAgY29uc3QgcHJldlNjcm9sbFBvc2l0aW9uID0gdGhpcy5zdGF0ZS5wcmV2aW91c1Njcm9sbFRvcDtcbiAgICB0aGlzLmRpcmVjdGl2ZS5zY3JvbGxUbyhwcmV2U2Nyb2xsUG9zaXRpb24pO1xuICB9XG59XG4iXX0=