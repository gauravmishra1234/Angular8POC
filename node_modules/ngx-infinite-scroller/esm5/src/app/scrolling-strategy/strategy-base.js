import isNumber from 'is-number';
import { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';
var StrategyBase = /** @class */ (function () {
    function StrategyBase(directive, state) {
        this.directive = directive;
        this.state = state;
    }
    StrategyBase.prototype.wasScrolledDown = function (prevPos, currentPos) {
        return prevPos.scrollTop < currentPos.scrollTop;
    };
    StrategyBase.prototype.wasScrolledUp = function (prevPos, currentPos) {
        return !this.wasScrolledDown(prevPos, currentPos);
    };
    StrategyBase.prototype.isScrollDownEnough = function (pos, scrollPositionTrigger) {
        return ((pos.scrollTop + pos.clientHeight) / pos.scrollHeight) > (scrollPositionTrigger / 100);
    };
    StrategyBase.prototype.isScrollUpEnough = function (pos, scrollPositionTrigger) {
        return (pos.scrollTop / pos.scrollHeight) < (scrollPositionTrigger / 100);
    };
    StrategyBase.prototype.getInitialScrollPositionValue = function (defaultScrollPosition) {
        var initialScrollPosition = this.directive.initialScrollPosition;
        if (isNumber(initialScrollPosition)) {
            return Number(initialScrollPosition);
        }
        var initialScrollPositions = this.getInitialScrollPositions();
        if (initialScrollPosition === InitialScrollPosition.DEFAULT) {
            return initialScrollPositions[defaultScrollPosition];
        }
        return initialScrollPositions[initialScrollPosition];
    };
    StrategyBase.prototype.getInitialScrollPositions = function () {
        var _a;
        var _b = this.state, scrollHeight = _b.scrollHeight, clientHeight = _b.clientHeight;
        return _a = {},
            _a[InitialScrollPosition.TOP] = 0,
            _a[InitialScrollPosition.MIDDLE] = scrollHeight / 2 - clientHeight / 2,
            _a[InitialScrollPosition.BOTTOM] = scrollHeight,
            _a;
    };
    return StrategyBase;
}());
export { StrategyBase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3ktYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmZpbml0ZS1zY3JvbGxlci8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2Nyb2xsaW5nLXN0cmF0ZWd5L3N0cmF0ZWd5LWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxRQUFRLE1BQU0sV0FBVyxDQUFDO0FBTWpDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRWxGO0lBQ0Usc0JBQ1ksU0FBdUMsRUFDdkMsS0FBNEI7UUFENUIsY0FBUyxHQUFULFNBQVMsQ0FBOEI7UUFDdkMsVUFBSyxHQUFMLEtBQUssQ0FBdUI7SUFDcEMsQ0FBQztJQUVLLHNDQUFlLEdBQXpCLFVBQTBCLE9BQXVCLEVBQUUsVUFBMEI7UUFDM0UsT0FBTyxPQUFPLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDbEQsQ0FBQztJQUVTLG9DQUFhLEdBQXZCLFVBQXdCLE9BQXVCLEVBQUUsVUFBMEI7UUFDekUsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFUyx5Q0FBa0IsR0FBNUIsVUFBNkIsR0FBbUIsRUFBRSxxQkFBNkI7UUFDN0UsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVTLHVDQUFnQixHQUExQixVQUEyQixHQUFtQixFQUFFLHFCQUE2QjtRQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRVMsb0RBQTZCLEdBQXZDLFVBQXdDLHFCQUE0QztRQUMxRSxJQUFBLDREQUFxQixDQUFvQjtRQUVqRCxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1lBQ25DLE9BQU8sTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDdEM7UUFFRCxJQUFNLHNCQUFzQixHQUE4QixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztRQUUzRixJQUFJLHFCQUFxQixLQUFLLHFCQUFxQixDQUFDLE9BQU8sRUFBRTtZQUMzRCxPQUFPLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDdEQ7UUFFRCxPQUFPLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLGdEQUF5QixHQUFqQzs7UUFDUSxJQUFBLGVBQTJDLEVBQXpDLDhCQUFZLEVBQUUsOEJBQTJCLENBQUM7UUFFbEQ7WUFDRSxHQUFDLHFCQUFxQixDQUFDLEdBQUcsSUFBRyxDQUFDO1lBQzlCLEdBQUMscUJBQXFCLENBQUMsTUFBTSxJQUFHLFlBQVksR0FBRyxDQUFDLEdBQUcsWUFBWSxHQUFHLENBQUM7WUFDbkUsR0FBQyxxQkFBcUIsQ0FBQyxNQUFNLElBQUcsWUFBWTtlQUM1QztJQUNKLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXNOdW1iZXIgZnJvbSAnaXMtbnVtYmVyJztcblxuaW1wb3J0IHsgTmd4SW5maW5pdGVTY3JvbGxlckRpcmVjdGl2ZSB9IGZyb20gJy4uL25neC1pbmZpbml0ZS1zY3JvbGxlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGlyZWN0aXZlU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vZGlyZWN0aXZlLXN0YXRlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTY3JvbGxQb3NpdGlvbiB9IGZyb20gJy4uL21vZGVsL3Njcm9sbC1wb3NpdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBJbml0aWFsU2Nyb2xsUG9zaXRpb24gfSBmcm9tICcuLi9lbnVtL2luaXRpYWwtc2Nyb2xsLXBvc2l0aW9uLXR5cGUuZW51bSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdHJhdGVneUJhc2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgZGlyZWN0aXZlOiBOZ3hJbmZpbml0ZVNjcm9sbGVyRGlyZWN0aXZlLFxuICAgIHByb3RlY3RlZCBzdGF0ZTogRGlyZWN0aXZlU3RhdGVTZXJ2aWNlXG4gICkgeyB9XG5cbiAgcHJvdGVjdGVkIHdhc1Njcm9sbGVkRG93bihwcmV2UG9zOiBTY3JvbGxQb3NpdGlvbiwgY3VycmVudFBvczogU2Nyb2xsUG9zaXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJldlBvcy5zY3JvbGxUb3AgPCBjdXJyZW50UG9zLnNjcm9sbFRvcDtcbiAgfVxuXG4gIHByb3RlY3RlZCB3YXNTY3JvbGxlZFVwKHByZXZQb3M6IFNjcm9sbFBvc2l0aW9uLCBjdXJyZW50UG9zOiBTY3JvbGxQb3NpdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy53YXNTY3JvbGxlZERvd24ocHJldlBvcywgY3VycmVudFBvcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaXNTY3JvbGxEb3duRW5vdWdoKHBvczogU2Nyb2xsUG9zaXRpb24sIHNjcm9sbFBvc2l0aW9uVHJpZ2dlcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICgocG9zLnNjcm9sbFRvcCArIHBvcy5jbGllbnRIZWlnaHQpIC8gcG9zLnNjcm9sbEhlaWdodCkgPiAoc2Nyb2xsUG9zaXRpb25UcmlnZ2VyIC8gMTAwKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpc1Njcm9sbFVwRW5vdWdoKHBvczogU2Nyb2xsUG9zaXRpb24sIHNjcm9sbFBvc2l0aW9uVHJpZ2dlcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChwb3Muc2Nyb2xsVG9wIC8gcG9zLnNjcm9sbEhlaWdodCkgPCAoc2Nyb2xsUG9zaXRpb25UcmlnZ2VyIC8gMTAwKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRJbml0aWFsU2Nyb2xsUG9zaXRpb25WYWx1ZShkZWZhdWx0U2Nyb2xsUG9zaXRpb246IEluaXRpYWxTY3JvbGxQb3NpdGlvbik6IG51bWJlciB7XG4gICAgY29uc3QgeyBpbml0aWFsU2Nyb2xsUG9zaXRpb24gfSA9IHRoaXMuZGlyZWN0aXZlO1xuXG4gICAgaWYgKGlzTnVtYmVyKGluaXRpYWxTY3JvbGxQb3NpdGlvbikpIHtcbiAgICAgIHJldHVybiBOdW1iZXIoaW5pdGlhbFNjcm9sbFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWFsU2Nyb2xsUG9zaXRpb25zOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0gdGhpcy5nZXRJbml0aWFsU2Nyb2xsUG9zaXRpb25zKCk7XG5cbiAgICBpZiAoaW5pdGlhbFNjcm9sbFBvc2l0aW9uID09PSBJbml0aWFsU2Nyb2xsUG9zaXRpb24uREVGQVVMVCkge1xuICAgICAgcmV0dXJuIGluaXRpYWxTY3JvbGxQb3NpdGlvbnNbZGVmYXVsdFNjcm9sbFBvc2l0aW9uXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbFNjcm9sbFBvc2l0aW9uc1tpbml0aWFsU2Nyb2xsUG9zaXRpb25dO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJbml0aWFsU2Nyb2xsUG9zaXRpb25zKCk6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0ge1xuICAgIGNvbnN0IHsgc2Nyb2xsSGVpZ2h0LCBjbGllbnRIZWlnaHQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgW0luaXRpYWxTY3JvbGxQb3NpdGlvbi5UT1BdOiAwLFxuICAgICAgW0luaXRpYWxTY3JvbGxQb3NpdGlvbi5NSURETEVdOiBzY3JvbGxIZWlnaHQgLyAyIC0gY2xpZW50SGVpZ2h0IC8gMixcbiAgICAgIFtJbml0aWFsU2Nyb2xsUG9zaXRpb24uQk9UVE9NXTogc2Nyb2xsSGVpZ2h0LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==