import * as tslib_1 from "tslib";
import { tap, filter } from 'rxjs/operators';
import { StrategyBase } from './strategy-base';
import { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';
var ScrollingToBoth = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollingToBoth, _super);
    function ScrollingToBoth(directive, state) {
        return _super.call(this, directive, state) || this;
    }
    ScrollingToBoth.prototype.scrollDirectionChanged = function (scrollPairChanged) {
        return scrollPairChanged;
    };
    ScrollingToBoth.prototype.scrollRequestZoneChanged = function (scrollDirectionChanged) {
        var _this = this;
        return scrollDirectionChanged.pipe(filter(function (scrollPositions) {
            return (_super.prototype.isScrollUpEnough.call(_this, scrollPositions[1], _this.directive.scrollUpPercentilePositionTrigger) || _super.prototype.isScrollDownEnough.call(_this, scrollPositions[1], _this.directive.scrollDownPercentilePositionTrigger));
        }), tap(function (scrollPositions) {
            _this.scrolledUp = _super.prototype.wasScrolledUp.call(_this, scrollPositions[0], scrollPositions[1]);
        }));
    };
    ScrollingToBoth.prototype.askForUpdate = function () {
        if (this.scrolledUp) {
            this.directive.onScrollUp.next();
        }
        else {
            this.directive.onScrollDown.next();
        }
    };
    ScrollingToBoth.prototype.setInitialScrollPosition = function () {
        var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.MIDDLE);
        this.directive.scrollTo(initialScrollPositionValue);
    };
    ScrollingToBoth.prototype.setPreviousScrollPosition = function () {
        var prevScrollPosition;
        if (this.scrolledUp) {
            prevScrollPosition = this.state.previousScrollTop +
                (this.state.scrollHeight - this.state.previousScrollHeight);
        }
        else {
            prevScrollPosition = this.state.previousScrollTop;
        }
        this.directive.scrollTo(prevScrollPosition);
    };
    return ScrollingToBoth;
}(StrategyBase));
export { ScrollingToBoth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsaW5nLXRvLWJvdGguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW5maW5pdGUtc2Nyb2xsZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL3Njcm9sbGluZy1zdHJhdGVneS9zY3JvbGxpbmctdG8tYm90aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPL0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFbEY7SUFBcUMsMkNBQVk7SUFJL0MseUJBQ0UsU0FBdUMsRUFDdkMsS0FBNEI7ZUFFNUIsa0JBQU0sU0FBUyxFQUFFLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRU0sZ0RBQXNCLEdBQTdCLFVBQThCLGlCQUErQztRQUUzRSxPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFFTSxrREFBd0IsR0FBL0IsVUFBZ0Msc0JBQW9EO1FBQXBGLGlCQWtCQztRQWhCQyxPQUFPLHNCQUFzQixDQUFDLElBQUksQ0FDaEMsTUFBTSxDQUFDLFVBQUMsZUFBaUM7WUFDdkMsT0FBTyxDQUFDLGlCQUFNLGdCQUFnQixhQUM1QixlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ2xCLEtBQUksQ0FBQyxTQUFTLENBQUMsaUNBQWlDLENBQ2pELElBQUksaUJBQU0sa0JBQWtCLGFBQzNCLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDbEIsS0FBSSxDQUFDLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FDbkQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLFVBQUMsZUFBaUM7WUFDcEMsS0FBSSxDQUFDLFVBQVUsR0FBRyxpQkFBTSxhQUFhLGFBQ25DLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDbEIsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSxzQ0FBWSxHQUFuQjtRQUNFLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNsQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDcEM7SUFDSCxDQUFDO0lBRU0sa0RBQXdCLEdBQS9CO1FBQ0UsSUFBTSwwQkFBMEIsR0FBRyxpQkFBTSw2QkFBNkIsWUFDcEUscUJBQXFCLENBQUMsTUFBTSxDQUM3QixDQUFDO1FBRUYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sbURBQXlCLEdBQWhDO1FBQ0UsSUFBSSxrQkFBa0IsQ0FBQztRQUV2QixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUI7Z0JBQy9DLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQy9EO2FBQU07WUFDTCxrQkFBa0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBaEVELENBQXFDLFlBQVksR0FnRWhEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFN0cmF0ZWd5QmFzZSB9IGZyb20gJy4vc3RyYXRlZ3ktYmFzZSc7XG5cbmltcG9ydCB7IE5neEluZmluaXRlU2Nyb2xsZXJEaXJlY3RpdmUgfSBmcm9tICcuLi9uZ3gtaW5maW5pdGUtc2Nyb2xsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IERpcmVjdGl2ZVN0YXRlU2VydmljZSB9IGZyb20gJy4uL2RpcmVjdGl2ZS1zdGF0ZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU2Nyb2xsaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi9tb2RlbC9zY3JvbGxpbmctc3RyYXRlZ3kubW9kZWwnO1xuaW1wb3J0IHsgU2Nyb2xsUG9zaXRpb24gfSBmcm9tICcuLi9tb2RlbC9zY3JvbGwtcG9zaXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgSW5pdGlhbFNjcm9sbFBvc2l0aW9uIH0gZnJvbSAnLi4vZW51bS9pbml0aWFsLXNjcm9sbC1wb3NpdGlvbi10eXBlLmVudW0nO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsaW5nVG9Cb3RoIGV4dGVuZHMgU3RyYXRlZ3lCYXNlIGltcGxlbWVudHMgU2Nyb2xsaW5nU3RyYXRlZ3kge1xuXG4gIHByaXZhdGUgc2Nyb2xsZWRVcDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBkaXJlY3RpdmU6IE5neEluZmluaXRlU2Nyb2xsZXJEaXJlY3RpdmUsXG4gICAgc3RhdGU6IERpcmVjdGl2ZVN0YXRlU2VydmljZVxuICApIHtcbiAgICBzdXBlcihkaXJlY3RpdmUsIHN0YXRlKTtcbiAgfVxuXG4gIHB1YmxpYyBzY3JvbGxEaXJlY3Rpb25DaGFuZ2VkKHNjcm9sbFBhaXJDaGFuZ2VkOiBPYnNlcnZhYmxlPFNjcm9sbFBvc2l0aW9uW10+KTpcbiAgICBPYnNlcnZhYmxlPFNjcm9sbFBvc2l0aW9uW10+IHtcbiAgICByZXR1cm4gc2Nyb2xsUGFpckNoYW5nZWQ7XG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsUmVxdWVzdFpvbmVDaGFuZ2VkKHNjcm9sbERpcmVjdGlvbkNoYW5nZWQ6IE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4pOlxuICAgIE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4ge1xuICAgIHJldHVybiBzY3JvbGxEaXJlY3Rpb25DaGFuZ2VkLnBpcGUoXG4gICAgICBmaWx0ZXIoKHNjcm9sbFBvc2l0aW9uczogU2Nyb2xsUG9zaXRpb25bXSkgPT4ge1xuICAgICAgICByZXR1cm4gKHN1cGVyLmlzU2Nyb2xsVXBFbm91Z2goXG4gICAgICAgICAgc2Nyb2xsUG9zaXRpb25zWzFdLFxuICAgICAgICAgIHRoaXMuZGlyZWN0aXZlLnNjcm9sbFVwUGVyY2VudGlsZVBvc2l0aW9uVHJpZ2dlclxuICAgICAgICApIHx8IHN1cGVyLmlzU2Nyb2xsRG93bkVub3VnaChcbiAgICAgICAgICBzY3JvbGxQb3NpdGlvbnNbMV0sXG4gICAgICAgICAgdGhpcy5kaXJlY3RpdmUuc2Nyb2xsRG93blBlcmNlbnRpbGVQb3NpdGlvblRyaWdnZXJcbiAgICAgICAgKSk7XG4gICAgICB9KSxcbiAgICAgIHRhcCgoc2Nyb2xsUG9zaXRpb25zOiBTY3JvbGxQb3NpdGlvbltdKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsZWRVcCA9IHN1cGVyLndhc1Njcm9sbGVkVXAoXG4gICAgICAgICAgc2Nyb2xsUG9zaXRpb25zWzBdLFxuICAgICAgICAgIHNjcm9sbFBvc2l0aW9uc1sxXSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXNrRm9yVXBkYXRlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNjcm9sbGVkVXApIHtcbiAgICAgIHRoaXMuZGlyZWN0aXZlLm9uU2Nyb2xsVXAubmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpcmVjdGl2ZS5vblNjcm9sbERvd24ubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRJbml0aWFsU2Nyb2xsUG9zaXRpb24oKTogdm9pZCB7XG4gICAgY29uc3QgaW5pdGlhbFNjcm9sbFBvc2l0aW9uVmFsdWUgPSBzdXBlci5nZXRJbml0aWFsU2Nyb2xsUG9zaXRpb25WYWx1ZShcbiAgICAgIEluaXRpYWxTY3JvbGxQb3NpdGlvbi5NSURETEUsXG4gICAgKTtcblxuICAgIHRoaXMuZGlyZWN0aXZlLnNjcm9sbFRvKGluaXRpYWxTY3JvbGxQb3NpdGlvblZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRQcmV2aW91c1Njcm9sbFBvc2l0aW9uKCk6IHZvaWQge1xuICAgIGxldCBwcmV2U2Nyb2xsUG9zaXRpb247XG5cbiAgICBpZiAodGhpcy5zY3JvbGxlZFVwKSB7XG4gICAgICBwcmV2U2Nyb2xsUG9zaXRpb24gPSB0aGlzLnN0YXRlLnByZXZpb3VzU2Nyb2xsVG9wICtcbiAgICAgICAgKHRoaXMuc3RhdGUuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5zdGF0ZS5wcmV2aW91c1Njcm9sbEhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZTY3JvbGxQb3NpdGlvbiA9IHRoaXMuc3RhdGUucHJldmlvdXNTY3JvbGxUb3A7XG4gICAgfVxuXG4gICAgdGhpcy5kaXJlY3RpdmUuc2Nyb2xsVG8ocHJldlNjcm9sbFBvc2l0aW9uKTtcbiAgfVxufVxuIl19